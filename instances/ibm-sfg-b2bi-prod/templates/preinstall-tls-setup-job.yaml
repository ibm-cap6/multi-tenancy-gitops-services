# (C) Copyright 2019-2022 Syncsort Incorporated. All rights reserved.

{{ include "sch.config.init" (list . "b2bi.sch.chart.config.values") }}
{{- $ibmsecretexist := ((empty (lookup "v1" "Secret" .Release.Namespace .sch.chart.components.ibmDefaultPullSecret.name)) | ternary "false" "true") }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.tlsSetupJob.name) | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.tlsSetupJob.name) | indent 4 }}
  annotations:
    "helm.sh/hook": "pre-install, pre-upgrade"
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": "hook-succeeded, before-hook-creation"
spec:
  backoffLimit: 0
  template:
    metadata:
      name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.tlsSetupJob.name) | quote }}
      labels:
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.tlsSetupJob.name) | indent 8 }}
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering .sch.chart.nonMetering.nonChargeableProductMetric nil "preinstall") | indent 8 }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name  | quote }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.podSecurityContextTest) | indent 8 }}
      {{- if or (.Values.global.image.pullSecret) (eq $ibmsecretexist "true") }}
      imagePullSecrets:
      {{- if .Values.global.image.pullSecret }}
        - name: {{ .Values.global.image.pullSecret }}
      {{- else }}
        - name: "{{ .sch.chart.components.ibmDefaultPullSecret.name }}"
      {{- end }}
      {{- end }}
      containers:
      - name: tls-setup
        {{- if .Values.test.image.digest }}
        image:  "{{ .Values.test.image.repository }}/{{ .Values.test.image.name }}@{{ .Values.test.image.digest }}"
        {{- else }}
        image:  "{{ .Values.test.image.repository }}/{{ .Values.test.image.name }}:{{ .Values.test.image.tag }}"
        {{- end }}
        imagePullPolicy:  "{{ .Values.test.image.pullPolicy }}"
        securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.containerSecurityContextTest) | indent 10 }}
        command:
        - "/bin/bash"
        - -c
        - |
          echo "starting tls setup job..."
          echo "release namespace - {{ .Release.Namespace }}"
          echo "ServiceAccount Name - {{ .Values.serviceAccount.name }}"


            echo "creating secret for rmi";
            openssl req -x509 -nodes -sha256 -subj "/CN={{ include "sch.names.fullCompName" (list . .sch.chart.components.rmi.name) }}.{{ .Release.Namespace }}.svc" -days 730 -newkey rsa:2048 -keyout tls.key -out tls.crt;
            kubectl create secret tls {{ include "sch.names.fullCompName" (list . .sch.chart.components.rmi.name) }} --key tls.key --cert tls.crt -n {{ .Release.Namespace }};
            rm -f tls.key tls.crt;


            echo "creating tls secret for asi";
            openssl req -x509 -nodes -sha256 -subj "/CN={{ include "sch.names.fullCompName" (list . .sch.chart.components.asiFrontendService.name) }}.{{ .Release.Namespace }}.svc" -days 730 -newkey rsa:2048 -keyout tls.key -out tls.crt;
            kubectl create secret tls {{ include "sch.names.fullCompName" (list . .sch.chart.components.asiFrontendService.name) }} --key tls.key --cert tls.crt -n {{ .Release.Namespace }};
            rm -f tls.key tls.crt;

          
            echo "creating tls secret for ac";
            openssl req -x509 -nodes -sha256 -subj "/CN={{ include "sch.names.fullCompName" (list . .sch.chart.components.acFrontendService.name) }}.{{ .Release.Namespace }}.svc" -days 730 -newkey rsa:2048 -keyout tls.key -out tls.crt;
            kubectl create secret tls {{ include "sch.names.fullCompName" (list . .sch.chart.components.acFrontendService.name) }} --key tls.key --cert tls.crt -n {{ .Release.Namespace }};
            rm -f tls.key tls.crt;


            echo "creating tls secret for api";
            openssl req -x509 -nodes -sha256 -subj "/CN={{ include "sch.names.fullCompName" (list . .sch.chart.components.apiFrontendService.name) }}.{{ .Release.Namespace }}.svc" -days 730 -newkey rsa:2048 -keyout tls.key -out tls.crt;
            kubectl create secret tls {{ include "sch.names.fullCompName" (list . .sch.chart.components.apiFrontendService.name) }} --key tls.key --cert tls.crt -n {{ .Release.Namespace }};
            rm -f tls.key tls.crt;


        resources:
          requests:
            memory: 128Mi
            cpu: 10m
            ephemeral-storage: "16Mi"
          limits:
            memory: 128Mi
            cpu: 50m
            ephemeral-storage: "32Mi"
      affinity:
{{- include "b2bi.architectureAffinity" . | indent 8 }}
      restartPolicy: Never
